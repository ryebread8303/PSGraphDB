using System;
using System.Collections.Generic;
using System.Linq;
public class GraphNode {
    public Guid ID;
    public Dictionary<string,string> Properties = new Dictionary<string,string>();
    public string[] Lables;
    public GraphRelation NextRelationship;
    public GraphNode (string[] lables, Dictionary<string,string> properties) {
        ID = Guid.NewGuid();
        Lables = lables;
        Properties = properties;
    }
    public GraphNode (string[] lables) {
        ID = Guid.NewGuid();
        Lables = lables;
    }
}
public class GraphDatabase {
    private List<GraphNode> NodeTable = new List<GraphNode>();
    //private List<GraphRelation> RelationTable;
    public void AddNode (GraphNode node) {
        NodeTable.Add(node);
    }
    public List<GraphNode> V () {
        return NodeTable;
    }
/*    public GraphNodeS[] has (GraphNode[] nodes, string key) {
        return nodes.Where(node => node.Properties.ContainsKey(key));
    }
*/
}

/* public class GraphProperty {
    public string Key;
    public string Value;
} */

public class GraphRelation {
    public Guid ID;
    public Dictionary<string,string> Properties = new Dictionary<string,string>();
    public GraphNode LeftNode;
    public GraphNode RightNode;
    public string RelationshipType;
    public GraphRelation PreviousRelation;
    public GraphRelation NextRelation;
    public bool FirstInChain;
    public GraphRelation (GraphNode leftnode, string relationshiptype, GraphNode rightnode) {
        ID = Guid.NewGuid();
        LeftNode = leftnode;
        RelationshipType = relationshiptype;
        RightNode = rightnode;
    }
}